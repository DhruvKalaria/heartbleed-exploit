package home

import (
	"git-go-websiteskeleton/app/common"
	"github.com/codeskyblue/go-sh"
	"html/template"
	"net/http"
)

type Page struct {
	Title      string
	Vulnerable string
	URL        string
}

func GetHomePage(rw http.ResponseWriter, req *http.Request) {

	p := Page{
		Title: "home",
	}

	common.Templates = template.Must(template.ParseFiles("templates/home/home.html", common.LayoutPath))
	err := common.Templates.ExecuteTemplate(rw, "base", p)
	common.CheckError(err, 2)
}

func CheckVulnerability(rw http.ResponseWriter, req *http.Request) {
	url := req.FormValue("surl")
	p := Page{}
	out, _ := sh.Command("./heartleech", "--scan", url).Output()
	p.Title = "page"
	p.Vulnerable = string(out)
	common.Templates = template.Must(template.ParseFiles("templates/home/home.html", common.LayoutPath))
	err := common.Templates.ExecuteTemplate(rw, "base", p)
	common.CheckError(err, 2)
}

func DownloadMemoryDump(rw http.ResponseWriter, req *http.Request) {
	url := req.FormValue("durl")
	p := Page{}
	if url == "" {
		p.URL = "BLANK URL"
		common.Templates = template.Must(template.ParseFiles("templates/home/home.html", common.LayoutPath))
		err := common.Templates.ExecuteTemplate(rw, "base", p)
		common.CheckError(err, 2)
	} else {
		out, _ := sh.Command("python", "hb-test.py", url).Output()
		p.URL = string(out)
		common.Templates = template.Must(template.ParseFiles("templates/home/home.html", common.LayoutPath))
		err := common.Templates.ExecuteTemplate(rw, "base", p)
		common.CheckError(err, 2)
	}
}
